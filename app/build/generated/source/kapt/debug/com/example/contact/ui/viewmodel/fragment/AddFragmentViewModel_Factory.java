// Generated by Dagger (https://dagger.dev).
package com.example.contact.ui.viewmodel.fragment;

import com.example.contact.domain.usecase.InsertContactUseCase;
import com.example.contact.domain.usecase.LoadContactUseCase;
import com.example.contact.domain.usecase.UpdateContactUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddFragmentViewModel_Factory implements Factory<AddFragmentViewModel> {
  private final Provider<LoadContactUseCase> loadContactUseCaseProvider;

  private final Provider<InsertContactUseCase> insertContactUseCaseProvider;

  private final Provider<UpdateContactUseCase> updateContactUseCaseProvider;

  public AddFragmentViewModel_Factory(Provider<LoadContactUseCase> loadContactUseCaseProvider,
      Provider<InsertContactUseCase> insertContactUseCaseProvider,
      Provider<UpdateContactUseCase> updateContactUseCaseProvider) {
    this.loadContactUseCaseProvider = loadContactUseCaseProvider;
    this.insertContactUseCaseProvider = insertContactUseCaseProvider;
    this.updateContactUseCaseProvider = updateContactUseCaseProvider;
  }

  @Override
  public AddFragmentViewModel get() {
    return newInstance(loadContactUseCaseProvider.get(), insertContactUseCaseProvider.get(), updateContactUseCaseProvider.get());
  }

  public static AddFragmentViewModel_Factory create(
      Provider<LoadContactUseCase> loadContactUseCaseProvider,
      Provider<InsertContactUseCase> insertContactUseCaseProvider,
      Provider<UpdateContactUseCase> updateContactUseCaseProvider) {
    return new AddFragmentViewModel_Factory(loadContactUseCaseProvider, insertContactUseCaseProvider, updateContactUseCaseProvider);
  }

  public static AddFragmentViewModel newInstance(LoadContactUseCase loadContactUseCase,
      InsertContactUseCase insertContactUseCase, UpdateContactUseCase updateContactUseCase) {
    return new AddFragmentViewModel(loadContactUseCase, insertContactUseCase, updateContactUseCase);
  }
}
