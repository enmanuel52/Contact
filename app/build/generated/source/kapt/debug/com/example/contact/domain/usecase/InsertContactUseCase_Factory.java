// Generated by Dagger (https://dagger.dev).
package com.example.contact.domain.usecase;

import com.example.contact.data.ContactRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class InsertContactUseCase_Factory implements Factory<InsertContactUseCase> {
  private final Provider<ContactRepository> repositoryProvider;

  public InsertContactUseCase_Factory(Provider<ContactRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public InsertContactUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static InsertContactUseCase_Factory create(
      Provider<ContactRepository> repositoryProvider) {
    return new InsertContactUseCase_Factory(repositoryProvider);
  }

  public static InsertContactUseCase newInstance(ContactRepository repository) {
    return new InsertContactUseCase(repository);
  }
}
